generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// SMART Analysis Models
model Criteria {
  id     Int        @id @default(autoincrement())
  name   String
  weight Float
  type   CriteriaType @default(BENEFIT) // New field

  // Relations
  subCriteria        SubCriteria[]
  alternativeRatings AlternativeRating[]

  @@map("criteria")
}

model Alternative {
  id   Int    @id @default(autoincrement())
  name String

  // Relations
  alternativeRatings AlternativeRating[]

  @@map("alternative")
}

model SubCriteria {
  id          Int    @id @default(autoincrement())
  criteriaId  Int
  realValue   String
  ratingValue Int

  // Relations
  criteria           Criteria            @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  alternativeRatings AlternativeRating[]

  @@map("sub_criteria")
}

model AlternativeRating {
  id                Int @id @default(autoincrement())
  criteriaId        Int
  subCriteriaId     Int 
  alternativeId     Int

  // Relations
  criteria    Criteria    @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  subCriteria SubCriteria @relation(fields: [subCriteriaId], references: [id], onDelete: Cascade)
  alternative Alternative @relation(fields: [alternativeId], references: [id], onDelete: Cascade)

  // Ensure unique rating per criteria-subcriteria-alternative combination
  @@unique([criteriaId, subCriteriaId, alternativeId])
  @@map("alternative_rating")
}

enum CriteriaType {
  COST
  BENEFIT
}
